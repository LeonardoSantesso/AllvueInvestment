// <auto-generated />
using System;
using Investment.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Investment.DAL.Migrations
{
    [DbContext(typeof(InvestmentDbContext))]
    [Migration("20241027183512_Initial-Database")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Investment.Core.Entities.SaleRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostBasisPerSoldShare")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost_basis_per_sold_share");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sale_date");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_cost");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_profit");

                    b.Property<decimal>("TotalSaleValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_sale_value");

                    b.HasKey("Id");

                    b.ToTable("sale_record", (string)null);
                });

            modelBuilder.Entity("Investment.Core.Entities.StockLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OriginalShares")
                        .HasColumnType("int")
                        .HasColumnName("original_shares");

                    b.Property<decimal>("PricePerShare")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_per_share");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("purchase_date");

                    b.Property<int>("Shares")
                        .HasColumnType("int")
                        .HasColumnName("shares");

                    b.HasKey("Id");

                    b.ToTable("stock_lot", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OriginalShares = 100,
                            PricePerShare = 20m,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Shares = 100
                        },
                        new
                        {
                            Id = 2,
                            OriginalShares = 150,
                            PricePerShare = 30m,
                            PurchaseDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Shares = 150
                        },
                        new
                        {
                            Id = 3,
                            OriginalShares = 120,
                            PricePerShare = 10m,
                            PurchaseDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Shares = 120
                        });
                });

            modelBuilder.Entity("Investment.Core.Entities.StockLotSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostBasis")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost_basis");

                    b.Property<int>("SaleRecordId")
                        .HasColumnType("int")
                        .HasColumnName("sale_record_id");

                    b.Property<int>("SharesSold")
                        .HasColumnType("int")
                        .HasColumnName("shares_sold");

                    b.Property<int>("StockLotId")
                        .HasColumnType("int")
                        .HasColumnName("stock_lot_id");

                    b.HasKey("Id");

                    b.HasIndex("SaleRecordId");

                    b.HasIndex("StockLotId");

                    b.ToTable("stock_lot_sale", (string)null);
                });

            modelBuilder.Entity("Investment.Core.Entities.StockLotSale", b =>
                {
                    b.HasOne("Investment.Core.Entities.SaleRecord", "SaleRecord")
                        .WithMany("StockLotSales")
                        .HasForeignKey("SaleRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Investment.Core.Entities.StockLot", "StockLot")
                        .WithMany("StockLotSales")
                        .HasForeignKey("StockLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleRecord");

                    b.Navigation("StockLot");
                });

            modelBuilder.Entity("Investment.Core.Entities.SaleRecord", b =>
                {
                    b.Navigation("StockLotSales");
                });

            modelBuilder.Entity("Investment.Core.Entities.StockLot", b =>
                {
                    b.Navigation("StockLotSales");
                });
#pragma warning restore 612, 618
        }
    }
}
